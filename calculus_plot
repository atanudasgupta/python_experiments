import numpy as np
import matplotlib.pyplot as plt
from sympy import *
from sympy import fourier_series, pi
from sympy.abc import x
from sympy.parsing.sympy_parser import parse_expr

# methods for generic plot axis

def plot_axis_with_zero(ax, title):
    ax.spines['top'].set_color('none')
    ax.spines['right'].set_color('none')
    ax.xaxis.set_ticks_position('bottom')
    ax.spines['bottom'].set_position(('data', 0))
    ax.yaxis.set_ticks_position('left')
    ax.spines['left'].set_position(('data', 0))
    ax.set_title(title)


##############################
# main

input1 = str(input("Type the function for Fourier series:"))
input2 = str(input("Type the function for Taylor series:"))

y, input_f = input1.split('=')
y1, input_f1 = input2.split('=')

f_series = fourier_series(input_f, (x, -pi, +pi))

input_function = parse_expr(input_f)
input_t = parse_expr(input_f1)

plot_series = f_series.sigma_approximation(10)

# find differentiation

diff_function = diff(input_function, x)

# find Integrals

intg_function = integrate(input_t, x)
# pretty_print(intg_function)

# print('Result of Integral=', intg_function.doit())

# Taylor series

expr = input_t

s = expr.series(x, 0, 6).removeO()

# value=s.subs([(x,1)])

# pretty_print(s)

figure = plt.figure(figsize=(18, 10))

# Axis creation
axis1 = figure.add_axes([0.1, 0.1, 0.4, 0.4])
axis2 = figure.add_axes([0.1, 0.55, 0.4, 0.4])

axis3 = figure.add_axes([0.55, 0.1, 0.4, 0.4])
axis4 = figure.add_axes([0.55, 0.55, 0.4, 0.4])

# Plot #1
x_data = np.arange(-np.pi, np.pi, 0.05)
y_series_diff, y_series_ori = [], []
for xxd in x_data:
    y_series_diff.append(diff_function.subs([(x, xxd)]).evalf(10))
    y_series_ori.append(input_function.subs([(x, xxd)]).evalf(10))

axis1.plot(x_data, y_series_ori, color='red', label='input: ' + str(input1))
axis1.plot(x_data, y_series_diff, color='green', label=diff_function)

plot_axis_with_zero(axis1, 'Differentiation')
legend4 = axis1.legend(loc='best')

# Plot #2

plot_axis_with_zero(axis2, 'Integration')
y_series_int, y_series_int_ori = [], []
for xxd in x_data:
    y_series_int.append(intg_function.subs([(x, xxd)]).evalf(10))
    y_series_int_ori.append(input_t.subs([(x, xxd)]).evalf(10))

axis2.plot(x_data, y_series_int_ori, color='red', label='input: ' + str(input2))
axis2.plot(x_data, y_series_int, color='blue', label=intg_function)

legend4 = axis2.legend(loc='best')

# Plot # 3
x_list = np.linspace(-np.pi, np.pi, 50)

y_series_data = []
for xx in x_list:
    y_series_data.append(plot_series.subs([(x, xx)]).evalf(10))

plot_axis_with_zero(axis3, 'Input function and Fourier series')

y_expr = []
for x1 in x_list:
    y_expr.append(input_function.subs([(x, x1)]).evalf(10))

axis3.plot(x_list, y_expr, 'r', label='input: ' + str(input1))
axis3.plot(x_list, y_series_data, 'g', label='Fourier series')

axis3.legend(loc='best', fontsize='large', frameon=true)

# Plot 4 Taylor series

y_expr4 = []
y_expr4b = []

for x4 in x_list:
    y_expr4.append(s.subs([(x, x4)]).evalf(10))
    y_expr4b.append(input_t.subs([(x, x4)]).evalf(10))

axis4.plot(x_list, y_expr4b, 'r', label='input: ' + input2)
axis4.plot(x_list, y_expr4, 'g', label='Taylor Series')

legend4 = axis4.legend(loc='best')

plot_axis_with_zero(axis4, 'Taylor series and Original')

# plt.savefig('/home/atanu/Downloads/plot.jpg')
plt.show()
